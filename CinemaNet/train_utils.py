# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/utils_04_mobilenet_v2_basic.ipynb (unless otherwise specified).

__all__ = ['xtra_tfms', 'get_tfms', 'to_film_ar', 'get_data', 'get_callbacks', 'cb_estop', 'metrics', 'cb_wandb']

# Cell
from fastai.vision import *
from fastai.callbacks import EarlyStoppingCallback, SaveModelCallback
from fastai.metrics import accuracy, Precision, Recall

from .custom_head import *
from .wandb import *

import wandb

# Cell
to_film_ar = lambda h: (h, int(h * 16/9)) # h = height

def xtra_tfms(base_size):
    box_dim = int(base_size/4)
    cutout_ = partial(cutout, p = .3, n_holes = (1,1), length = (box_dim, box_dim))
    jitter_ = partial(jitter, p = .3,  magnitude = (0.005, 0.01))
    skew_   = partial(skew,   p=.3, direction = (0, 7), magnitude = 0.2)
    squish_ = partial(squish, p=.3, row_pct = 0.25, col_pct = 0.25)
    tilt_   = partial(tilt,   p=.3, direction = (0, 3))
    perp_warp_ = partial(perspective_warp, p=.3, magnitude = (-0.2, 0.2))
    crop_pad_  = partial(crop_pad, p=.3, padding_mode = 'border', row_pct = 0.1, col_pct = 0.1)
    rgb_randomize_ = partial(rgb_randomize, thresh=0.05)
    #dihedral_  = partial(dihedral, ())

    xtra_tfms = [jitter_(), skew_(), squish_(), perp_warp_(),
                 tilt_(), cutout_(), crop_pad_()]

    return xtra_tfms

def get_tfms(base_size): return get_transforms(do_flip = True,
                                               flip_vert = False,
                                               max_zoom = 1.,
                                               max_lighting = 0.4,
                                               max_warp = 0.3,
                                               p_affine = 0.85,
                                               p_lighting = 0.85,
                                               xtra_tfms = xtra_tfms(base_size))

# Cell
def get_data(path, img_size, batch_size, transforms=get_transforms(max_zoom=1.), **kwargs):
    return ImageDataBunch.from_folder(path, 'train', 'valid',
                                      size    = img_size,
                                      ds_tfms = transforms, bs=batch_size,
                                      resize_method = ResizeMethod.SQUISH,
                                      **kwargs
                                     ).normalize(imagenet_stats)

# Cell
metrics   = [accuracy, Precision(), Recall()]

# This callback won't be needed if using the `WandbCallback`
def get_callbacks(learner, mod_name, early_stop=True, patience=5, monitor='accuracy', min_delta=0.01):
    callbacks=[
        SaveModelCallback(learner, every='improvement', name=f'{mod_name}-opt_accuracy', monitor='accuracy'),
        SaveModelCallback(learner, every='improvement', name=f'{mod_name}-opt_val_loss'),
        WandbCallback    (learner, monitor=monitor, input_type='images', log='all')
    ]
    if early_stop: callbacks.append(EarlyStoppingCallback(learner, patience=patience, min_delta=min_delta, monitor=monitor))
    return callbacks


cb_wandb = partial(WandbCallback,
                   log='all',
                   monitor = 'accuracy',
                   input_type = 'images')


def cb_estop(learner, patience=5, min_delta=0.01, monitor='accuracy'):
    return EarlyStoppingCallback(learner, patience=patience, min_delta=min_delta, monitor=monitor)